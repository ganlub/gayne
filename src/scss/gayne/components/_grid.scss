@import '../settings';


//
// @functions
//

@function grid-calc($colNumber, $totalColumns) {
  $result: percentage(($colNumber / $totalColumns));
  @if $result == 0% { $result: 0; }
  @return $result;
}


//
// @mixins
//


@mixin make-container($type: false) {
  margin-left: auto;
  margin-right: auto;
  padding-left:  ($column-gutter / 2);
  padding-right: ($column-gutter / 2);

  @if $type == fluid {
  }
  @else {
    max-width: $row-width;
  }
}

// Creates rows
@mixin grid-row($type: false) {

  @if $type == nest {
    margin: 0 (-($column-gutter/2));
    max-width: none;
    width: auto;
  }
  @else if $type == nest-collapse {
    margin: 0;
    max-width: none;
    width: auto;
  }
  @else {
    margin: 0 auto;
    // max-width: $row-width;
    width: 100%;
  }

	@include clearfix;
}


// Creates columns
@mixin grid-column(
	$columns: false,
  $offset: false,
  $push:false,
  $pull:false,
  $last-column: false,
  $collapse: false,
  $float: true,
	$position: false) {

  @if $position {
    position: relative;
  }

	@if $collapse {
    	padding-left: 0;
    	padding-right: 0;
	}
	@else if $collapse == false {
    padding-left: ($column-gutter / 2);
    padding-right: ($column-gutter / 2);
  }

  @if $columns {
    width: grid-calc($columns, $total-columns);
  }

  @if $float {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }

  @if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
  @if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }
  @if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }
}

// Generate classes for grid size
@mixin grid-sizes($size) {
  @for $i from 0 through $total-columns - 1 {
    .#{$size}-push-#{$i} {
      @include grid-column($push:$i, $collapse:null, $float:false);
    }
    .#{$size}-pull-#{$i} {
      @include grid-column($pull:$i, $collapse:null, $float:false);
    }
  }

  .columns,
  .column {
    @include grid-column($columns:false, $position:true);
  }

  @for $i from 1 through $total-columns {
    .#{$size}-#{$i} { @include grid-column($columns:$i, $collapse:null, $float:false); }
  }

  @for $i from 0 through $total-columns - 1 {
    .#{$size}-offset-#{$i} { @include grid-column($offset:$i, $collapse:null, $float:false); }
  }
}

@mixin visibility-for($size, $breakpoint) {
    .hide-for-#{$size}-down {
      @media (max-width: #{$breakpoint}) {
        display: none !important;
      }
    }

    .hide-for-#{$size}-up {
			@media (max-width: #{$breakpoint}) {
				display: none !important;
			}
    }
}

.container {
  @include make-container;
}

.container-fluid {
  @include make-container(fluid);
}

.row {
	@include grid-row;

  &.collapse {
    > .column,
    > .columns { @include grid-column($collapse:true, $float:false); }

    .row {margin-left:0; margin-right:0;}
  }

  .row {
    @include grid-row($type:nest);
    &.collapse { @include grid-row($type:nest-collapse); }
  }
}

.column,
.columns {
   @include grid-column($columns:$total-columns);
}

.column,
.columns {
  & + &:last-child {
    float: $last-child-float;
  }
  & + &.end {
    float: $default-float;
  }
}


@include breakpoint-up(xsmall) {
	@include grid-sizes(xsmall);
};

@include breakpoint-up(small) {
	@include grid-sizes(small);
};

@include breakpoint-up(medium) {
	@include grid-sizes(medium);
};

@include breakpoint-up(large) {
	@include grid-sizes(large);
};

@include breakpoint-up(xlarge) {
	@include grid-sizes(xlarge);
};

@each $sizes in map-keys($breakpoint-sizes) {
  .hidden-#{$sizes}-up {
    @include breakpoint-up($sizes) {
      display: none !important;
    }
  }
  .hidden-#{$sizes}-down {
    @include breakpoint-down($sizes) {
      display: none !important;
    }
  }
}
